(Definir (dec_bin n)
    "Convertit `n` (nombre) depuis la base 10 vers le binaire (texte)."
    "ProfGra"
    (Initialiser n n)
    (!!! "`b` est le texte à retourner.")
    (Initialiser b "")
    (Initialiser r 0)
    (Faire
        (Affecter_a r (% n 2))
        (Affecter_a b (Concatener (Texte r) b))
        (Affecter_a n (/ (- n r) 2))
     Tant_que (=/ n 0)
    )
    (Retourner b)
)

(Definir (bin_dec txt)
    "Convertit `txt` (texte) depuis le binaire vers la base 10 (nombre)."
    "ProfGra"
    (!!! "`n` est le nombre à retourner.")
    (Initialiser n 0)
    (Initialiser i (Longueur txt))
    (Initialiser poids 1)
    (Tant_que (> i 0) Faire
        (Affecter_a n (+ n (* poids (Nombre (Nieme txt i)))))
        (Affecter_a poids (* poids 2))
        (Affecter_a i (- i 1))
    )
    (Retourner n)
)

(Definir (base64 txt)
    "Convertit une chaîne d’octets `txt` en base64."
    "ProfGra"
    (Initialiser txt txt)
    (Initialiser retour_base64 "")
    (!!! "Liste des caractères possibles.")
    (Initialiser chars (Concatener
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz"
        "0123456789+/"))
    (Tant_que (>= (Longueur txt) 6) Faire
        (Initialiser char_bin "")
        (Initialiser i 1)
        (Tant_que (<= i 6) Faire
            (Ajouter_a char_bin (Tete txt))
            (Affecter_a txt (Queue txt))
            (Affecter_a i (+ i 1))
        )
        (Ajouter_a retour_base64 (Nieme chars (+ (bin_dec char_bin) 1)))
    )
    (Si (Non (Vide? txt)) Alors
        (Tant_que (< (Longueur txt) 6) Faire
            (Ajouter_a txt "0")
        )
        (Ajouter_a retour_base64 (Nieme chars (+ (bin_dec txt) 1)))
    )
    (Tant_que (=/ (% (Longueur retour_base64) 4) 0) Faire
        (Ajouter_a retour_base64 "=")
    )
    (Retourner retour_base64)
)
(Exemples_de base64
    (Liste
        (? "010010000110100100100001") "SGkh"
        (? "00110001") "MQ=="

    )
)
(Tester base64)

(Definir (petit_bout n longueur)
    "Convertit `n` (nombre) depuis la base 10 vers le binaire (texte).

    Si le nombre dépasse 255, on passe les octets forts à droite (voir
    http:fr.wikipedia.org/wiki/Endianness ).  
    On complète le mot (sur la droite) pour qu’il soit de longueur `longueur`."
    "ProfGra"
    (!!! "Tout d’abord, la conversion grand-boutiste.")
    (Initialiser bin (dec_bin n))
    (!!! "Ensuite on complète jusqu’à la longueur voulue.")
    (Tant_que (< (Longueur bin) (* 8 longueur)) Faire
        (Affecter_a bin (Concatener "0" bin))
    )
    (!!! "Puis on inverse l’ordre des octets.")
    (Initialiser octet "")
    (Initialiser retour_petit_bout "")
    (Initialiser i 1)
    (Tant_que (Non (Vide? bin)) Faire
        (Affecter_a octet (Concatener octet (Tete bin)))
        (Affecter_a bin (Queue bin))
        (Affecter_a i (+ i 1))
        (Si (= i 9) Alors
            (Affecter_a retour_petit_bout (Concatener octet retour_petit_bout))
            (Affecter_a octet "")
            (Affecter_a i 1)
        )
    )
    (Retourner retour_petit_bout)
)
(Exemples_de petit_bout
    (Liste
        (?   0 1) "00000000"
        (?  33 1) "00100001"
        (? 256 2) "0000000000000001"
        (? 256 3) "000000000000000100000000"
    )
)
(Tester petit_bout)

(Definir (pixels_bmp pixels)
    "Convertit une liste de listes de listes (`pixels`) en binaire (texte).
    La liste contient les lignes (partant du haut), qui sont des listes de
    pixels (partant de la gauche), qui sont des listes à trois éléments (RVB)."
    "ProfGra"
    (Initialiser largeur (Longueur (Nieme pixels 1)))
    (Initialiser hauteur (Longueur pixels))
    (Initialiser retour_pixels_bmp "")
    (Initialiser pix_liste (Liste))
    (Initialiser pix_24_bits "")
    (Initialiser pix_ligne "")
    (!!! "Les lignes sont parcourues de bas en haut.")
    (Initialiser x 1)
    (Initialiser y hauteur)
    (Tant_que (>= y 1) Faire
        (Tant_que (<= x largeur) Faire
            (Affecter_a pix_liste (Nieme (Nieme pixels y) x))
            (!!! "On utilise `petit_bout` pour padder à 8 bits.")
            (Affecter_a pix_24_bits
                (Concatener
                    (petit_bout (Nieme pix_liste 3) 1)
                    (petit_bout (Nieme pix_liste 2) 1)
                    (petit_bout (Nieme pix_liste 1) 1)
                )
            )
            (Affecter_a pix_ligne (Concatener pix_ligne pix_24_bits))
            (Affecter_a x (+ x 1))
        )
        (!!! "On doit obtenir une longueur multiple de 4 octets.")
        (Tant_que (=/ 0 (% (Longueur pix_ligne) 32)) Faire
            (Ajouter_a pix_ligne "0")
        )
        (Affecter_a retour_pixels_bmp (Concatener retour_pixels_bmp pix_ligne))
        (Affecter_a pix_ligne "")
        (Affecter_a x 1)
        (Affecter_a y (- y 1))
    )
    (Retourner retour_pixels_bmp)
)

(Definir (image_vers_bmp img)
    "Retourne le bitmap (texte binaire) d’une liste de liste de pixels (`img`)."
    "ProfGra"
    (Initialiser image_bin (pixels_bmp img))
    (Initialiser nb_octets (/ (Longueur image_bin) 8))
    (Retourner (Concatener
        (petit_bout 66 1) (petit_bout 77 1) # (!!! "Pour B et M.")
        (petit_bout (+ 54 nb_octets) 4)
        "00000000" "00000000"     # (!!! "reserved")
        "00000000" "00000000"     # (!!! "reserved")
        # (!!! "offset of where BMP data lives (54 bytes)")
        "00110110" "00000000" "00000000" "00000000"
        # (!!! "number of remaining bytes in header from here (40 bytes)")
        "00101000" "00000000" "00000000" "00000000"
        (petit_bout (Longueur (Nieme img 1)) 4) # largeur
        (petit_bout (Longueur img) 4)           # hauteur
        "00000001" "00000000" # (!!! "the number of color planes (1)")
        "00011000" "00000000" # (!!! "24 bits / pixel")
        # (!!! "number of remaining bytes in header from here (40 bytes)")
        "00000000" "00000000" "00000000" "00000000"
        (petit_bout nb_octets 4)
        # (!!! "2835 pixels/meter - horiz res")
        "00010011" "00001011" "00000000" "00000000"
        # (!!! "2835 pixels/meter - vert res")
        "00010011" "00001011" "00000000" "00000000"
        # (!!! "number of colors in the palette (keep 0 for 24-bit)")
        "00000000" "00000000" "00000000" "00000000"
        # (!!! "0 important colors (means all colors are important)")
        "00000000" "00000000" "00000000" "00000000"
        image_bin
    ))
)

(Affecter_a credit_iterations 10000)
(Initialiser R (Liste 255 0 0))
(Initialiser V (Liste 0 255 0))
(Initialiser B (Liste 0 0 255))
(Initialiser image (Liste (Liste R V)
                          (Liste B R)
                          (Liste V B)))
(Initialiser bmp (image_vers_bmp image))
(Afficher (Concatener
    "<img "
    "style=\""
    "image-rendering: -moz-crisp-edges;
     image-rendering:   -o-crisp-edges;
     image-rendering: -webkit-optimize-contrast;
     image-rendering: crisp-edges;
     -ms-interpolation-mode: nearest-neighbor;"
    "\" "
    "src=\""
    "data:image/bmp;base64,"
    (base64 bmp)
    "\" width=\"100\" />"
))
(Afficher "Voir <a href=\"http://galerie.microalg.info/profgra:tests:images\">cette page</a> pour des explications.")

